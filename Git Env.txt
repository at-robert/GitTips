
[To update all git folders]
# find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git fs && echo)' \;

How it works:

find . : to find everything in the current folder
-maxdepth 1 : so that it doesn't recurse into subdirs of the repos
-mindepth 1 : so that it skips the current directory (of depth 0)
-type d : only find directories
-exec sh -c : spawn a shell and give it a command
'(echo {} && cd {} && git status && echo)' : the command given to the shell
echo {} : echo the directory found by find
cd {} : cd into the directory found by find
# git status -s : run the actual git status, with the -s (short) option
git fs : This is short for git fetch & git status
echo : echo an empty line, for readability
\; : semicolon to run shell for each of the found directories instead of passing them all to one shell as arguments

[TOPICS]
 * Setting up Git

1. Download and install the latest version of Git.
On your computer, open the Terminal application.

2. Tell Git your name so your commits will be properly labeled. Type everything after the $ here:
$git config --global user.name "at-robert"

git config --global user.name "robert.lo"
git config --global user.email "robert.lo@amtran.com.tw"

git config --global mergetool.keepBackup false


3. Tell Git the email address that will be associated with your Git commits. 
The email you specify should be the same one found in your email settings. 
To keep your email address hidden, see "Keeping your email address private".

$git config --global user.email "atttrobert@gmail.com"
[TOPICS --]

[TOPICS]
* Authenticating with GitHub from Git

When you connect to a GitHub repository from Git, you'll need to authenticate with GitHub using either HTTPS or SSH.
Connecting over HTTPS (recommended)

If you clone with HTTPS, you can cache your GitHub password in Git using a credential helper.

Connecting over SSH
If you clone with SSH, you must generate SSH keys on each computer you use to push or pull from GitHub.
[TOPICS --]

[TIPS]
* To copy git files from the Github.com
git clone https://github.com/at-robert/TestFolder.git
git clone https://github.com/at-robert/GitTips.git
git clone https://github.com/at-robert/ATP_FCST.git
git clone https://github.com/at-robert/LinuxScript.git
git clone https://github.com/at-robert/RaspPython.git

[TOPICS]
* How to setup Github to ignore some certain file types which should not be uploaded. 
 a. In the terminal interface, switching the Git working folder
 b. To create a file ".gitignore" if it doesn't exist yet.
 c. To edit this file to add the following content to specify what type of file you don't git to manage them

  cache/
  log/*.log
  tmp/
  *.tmp
  *.swp
  *.o
  *.so
  *.a
  *.exe
  *.bin
  *~
  .DS_Store
  ._.DS_Store

[TOPICS --]

[TIPS]
git@github.com:at-robert/GitTips.git


…or create a new repository on the command line
echo "# GitTips" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/at-robert/GitTips.git
git push -u origin master

…or push an existing repository from the command line
git remote add origin https://github.com/at-robert/GitTips.git
git push -u origin master


git commit -m "[refactor] - To add an ignore list and move some files to the specific folder"


[Pull]
git pull -u origin master

[Git Hub respository list]
https://github.com/at-robert/GitTips.git
https://github.com/at-robert/RaspPython.git
https://github.com/at-robert/LinuxScript.git
https://github.com/at-robert/PyCrawler.git
https://github.com/at-robert/TestFolder.git
https://github.com/at-robert/ASK_NodeJS.git
https://github.com/at-robert/NodeJS_Uclass.git
https://github.com/at-robert/AndroidCamExe.git
https://github.com/at-robert/Arduino.git
https://github.com/at-robert/AWS_Iot.git
https://github.com/at-robert/NodeJS_Uclass2.git
https://github.com/at-robert/SocketC.git
https://github.com/at-robert/userland.git
https://github.com/at-robert/ubidots_iot.git
https://github.com/vpython/visual.git

[BitBucket]
https://at-robert@bitbucket.org/at-robert/swiss_knife.git

[MicroSoft]
ssh://RobPriProj@robpriproj.visualstudio.com:22/_git/RobFirstProject
ssh://RobPriProj@vs-ssh.visualstudio.com:22/_ssh/NodeJS_SocketIO_Proj
ssh://RobPriProj@robpriproj.visualstudio.com:22/_git/GCP_tensorflow
ssh://RobPriProj@vs-ssh.visualstudio.com:22/_ssh/Taiwan_Stock
ssh://RobPriProj@vs-ssh.visualstudio.com:22/_ssh/GCP_Cloud_Vision

[Google Cloud Platform]
https://source.developers.google.com/p/aispeaker-172008/r/first_app

[MicroSoft Git repository web page]
https://robpriproj.visualstudio.com/_projects

[heroku]
[Python stock data vistualization]
https://arditstock.herokuapp.com/ | https://git.heroku.com/arditstock.git

[Python Data collecting APP]
https://datacollec.herokuapp.com/ | https://git.heroku.com/datacollec.git

https://noderobjserver.herokuapp.com/ | https://git.heroku.com/noderobjserver.git

[NodeJS ToDo REST API]
https://nojstodo.herokuapp.com/ | https://git.heroku.com/nojstodo.git

[Study and pratice]
https://try.github.io/levels/1/challenges/1

[SSH key]
cd ~
mkdir .ssh
cd ~/.ssh 
ssh-keygen -t rsa -b 4096 -C "atttrobert@gmail.com"

git clone git@github.com:at-robert/RaspPython.git
git clone git@bitbucket.org:at-robert/swiss_knife.git

[To resolve conflict]
When you have a conflict, you can initiate your merge sessions from the command line typing "git mergetool" or from a visual tool
$ git mergetool

[To export source code from git]

Probably the simplest way to achieve this is with git archive. If you really need just the expanded tree you can do something like this.
$ git archive master | tar -x -C ~/Downloads/GitAriche

Most of the time that I need to 'export' something from git, I want a compressed archive in any case so I do something like this.
$ git archive master | bzip2 >source-tree.tar.bz2

ZIP archive:
$ git archive --format zip --output /full/path/to/zipfile.zip master 

git help archive for more details, it's quite flexible.

Note: If you are interested in exporting the index, the command is
git checkout-index -a -f --prefix=/destination/path/