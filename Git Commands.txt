[TOPICS]
 安裝與設定 Git

Ubuntu 底下安裝 Git 非常簡單，只要在終端機執行：

sudo apt-get install git-core git-doc
接着，建議執行以下指令，將系統預設編輯器設定為 Vim：

sudo update-alternatives --config editor
每個使用者帳號都會有自己的 Git 設定檔，通常是：

~/.gitconfig
例如我的設定檔內容是：

[user]
name = 張旭
email = zx1986@gmail.com

[color]
diff = auto
初始化 Git
（資料夾內會多出一個名為 .git 的隱藏資料夾）：

git init
之後只要每次修改或新增檔案後，
執行以下兩個指令，Git 就會做一次紀錄：

git add 修改或新增的檔案名
git commit -m '關於此次修改的描述訊息'
可以開一個新的資料夾進行練習：

mkdir test
cd test
touch hello
git init
git add hello
git commit -m 'hello, Git!'
好了，您已經開始在使用 Git 啦！

Git 輔助說明

需要注意，Git 不會把空的資料夾加入控管，
例如 log、cache 這類資料夾，我們通常不會想要追蹤裏面的檔案，
但還是需要這個資料夾存在，可以在底下建立一個隱藏檔，例如 .gitkeep：

cd log
tocuh .gitkeep
在跟「.git」同一層的目錄中，可以建立一個 .gitignore 檔案。
.gitignore 用來設定「不希望被 Git 控管的檔案與資料夾」。
一個簡單的 .gitignore 內容可以是這樣：

cache/
log/*.log
tmp/
*.tmp
*.swp
*.o
*.so
*.a
*.exe
*~
執行 git help 會顯示常用的 Git 指令與簡單說明：

add        Add file contents to the index
bisect     Find by binary search the change that introduced a bug
branch     List, create, or delete branches
checkout   Checkout a branch or paths to the working tree
clone      Clone a repository into a new directory
commit     Record changes to the repository
diff       Show changes between commits, commit and working tree, etc
fetch      Download objects and refs from another repository
grep       Print lines matching a pattern
init       Create an empty git repository or reinitialize an existing one
log        Show commit logs
merge      Join two or more development histories together
mv         Move or rename a file, a directory, or a symlink
pull       Fetch from and merge with another repository or a local branch
push       Update remote refs along with associated objects
rebase     Forward-port local commits to the updated upstream head

=====================================================
reset      Reset current HEAD to the specified state

git reset 砍掉 commit 重來，但是修改的程式還是留在 working tree。例如：
git reset HEAD^ 就會回到前一版本(一個^表示是前一版)，並把其中的 changes 繼續留在 working tree 中。
適合發現前一次 commit 有問題或是想要修改 commit log，可以修改後再重新 commit。
git reset 如果加上 –soft 參數則會把 changes 直接加到 staging area。
加上 –hard 參數表示不留 staging area 也不留 working tree(完全刪除任何修改記錄)，例如：
git reset –hard HEAD^ 則會完全抹掉前一次的 commit。
=====================================================


rm         Remove files from the working tree and from the index
show       Show various types of objects
status     Show the working tree status
tag        Create, list, delete or verify a tag object signed with GPG
在 Git 指令後加上 -h 參數，能夠查詢該指令詳細的用法，例如：

git add -h
git commit -h
git pull -h
git push -h

[TOPICS --]

-[git commit]
-git commit -F ~/Documents/Github/Git_log.txt

git checkout -f
-f, --force           force checkout (throw away local modifications)

[To upload the new branch onto the remote repository]
git push --set-upstream origin f2

[Git log 基本介紹]

印出來的結果其實又臭又長，實在是不太實用...

別擔心
我們可以使用 --pretty=format 將 log的內容做一下整理

$ git log --pretty=format:"%h - %an, %ar : %s"
其中 %h, %an , %ar , %s

分別代表git log中不同的欄位值

選項	選項的說明
%H	該更新的SHA1雜湊值
%h	該更新的簡短SHA1雜湊值
%T	存放該更新的根目錄的Tree物件的SHA1雜湊值
%t	存放該更新的根目錄的Tree物件的簡短SHA1雜湊值
%P	該更新的父更新的SHA1雜湊值
%p	該更新的父更新的簡短SHA1雜湊值
%an	作者名字
%ae	作者電子郵件
%ad	作者的日期 (格式依據 date 選項而不同)
%ar	相對於目前時間的作者的日期
%cn	提交者的名字
%ce	提交者的電子郵件
%cd	提交的日期
%cr	相對於目前時間的提交的日期
%s	標題
git log 後面可以接的參數有哪些呢？

選項	選項的說明
-p	顯示每個更新與上一個的差異。
--word-diff	使用 word diff 格式顯示 patch 內容。
--stat	顯示每個更新更動的檔案的統計及摘要資訊。
--shortstat	僅顯示--stat提供的的訊息中關於更動、插入、刪除的文字。
--name-only	在更新的訊息後方顯示更動的檔案列表。
--name-status	顯示新增、更動、刪除的檔案列表。
--abbrev-commit	僅顯示SHA1查核值的前幾位數，而不是顯示全部的40位數。
--relative-date	以相對於目前時間方式顯示日期（例如：「2 weeks ago」），而不是完整的日期格式。
--graph	以 ASCII 在 log 輸出旁邊畫出分支的分歧及合併。
--pretty	以其它格式顯示更新。 可用的選項包含oneline、short、full、fuller及可自訂格式的format。
--oneline	--pretty=oneline --abbrev-commit 的簡短用法。
-(n)	僅顯示最後 n 個更新
--since, --after	列出特定日期後的更新。
--until, --before	列出特定日期前的更新。
--author	列出作者名稱符合指定字串的更新。
--committer	列出提交者名稱符合指定字串的更新。
我們可以透過上面的參數值，來設定git lob要顯示的格式和範圍。 
更多參數說明
而參數不止上面這些項目而已，還可以透過awk,grep,sed 指令去做更多工作
若想知道更多的話，可以在command line上面打

man git-log
回到正題，而我需要的功能是找出不同天由我寫的commit，並計算數量

寫法如下

git log --pretty=format:"%ad " --date=short --author=james | sort -u | awk '{print $1,a++}' 
上面的寫法就是 要求 git log 列出有 james commit 的 日期，並計算有幾個日期

完畢～

計算結果有33天
任務完成