四種基本的比較方式

要透過 git diff 命令比對任意兩個版本，通常會有以下四種指令的用法：

git diff
在什麼參數都不加的使用情況，比對的是「工作目錄」與「索引」之間的差異。這是個很常用的指令，因為當你執行 git add . 指令之前，先透過 git diff 查看你自己到底改了哪些東西。

註：事實上，在使用 Git 版本控管的過程中，在執行 git commit 之前，的確有可能會執行 git add 指令好幾次，用以確認到底哪些檔案要加入到索引之中，最後才會 commit 進版本。

git diff commit
如果你只在 git diff 之後加上一個 commit id，比對的是「工作目錄」與「指定 commit 物件裡的那個 tree 物件」。

最常用的指令是 git diff HEAD，因為這代表你要拿「工作目錄」與「當前分支的最新版」進行比對。這種比對方法，不會去比對「索引」的狀態，所以各位必須區分清楚，
你到底比對的是甚麼 tree 物件的來源。

git diff --cached commit
在執行 git commit 之前，索引狀態應該已經都準備好了。所以如果你要比對「當前的索引狀態」與「指定 commit 物件裡的那個 tree 物件」，就可以用這個指令完成比對任務。

最常用的指令一樣是 git diff --cached HEAD，這個語法代表的是「當前的索引狀態」與「當前分支的最新版」進行比對。這種比對方法，不會去比對「工作目錄」的檔案內容，
而是直接去比對「索引」與「目前最新版」之間的差異，這有助於你在執行 git commit 之前找出那些變更的內容，也就是你將會有哪些變更被建立版本的意思。

註1: git diff --cached 與 git diff --staged 是完全一樣的結果，**--staged** 只是 --cached 的別名，讓你比較好記而已!

註2: git diff --cached 與 git diff --cached HEAD 執行時也是完全一樣的結果，最後的 HEAD 可以省略。

git diff commit1 commit2
最後一種則是透過兩個不同的版本 ( commit id ) 來比對其差異，這個命令可以跳過「索引」與「工作目錄」的任何變更，而是直接比對特定兩個版本。
事實上 Git 是比對特定兩個版本 commit 物件內的那個 tree 物件。

最常用的指令則是 git diff HEAD^ HEAD 命令，這代表你要比較【最新版的前一版】與【最新版】之間的差異。這裡的 HEAD 與 ^ 的意義，我們會在日後的文章中說明。

今日小結

今天介紹的 git diff 是個很常用的指令，各位應該熟練地使用它。我們最後來複習一下其常用指令的差異：

git diff => 工作目錄 vs 索引
git diff HEAD => 工作目錄 vs HEAD
git diff --cached HEAD => 索引 vs HEAD
git diff --cached => 索引 vs HEAD
git diff HEAD^ HEAD => HEAD^ vs HEAD

我重新整理一下本日學到的 Git 指令與參數：

* git log
* git diff
* git diff HEAD
* git diff --cached
* git diff --staged
* git diff HEAD^ HEAD

[ATOM hotkey]
alt+cmd+g : To the next Git diff