[Advance Git Config]
System Level:
gitconfig location:
Mac OS X:
/usr/local/git/etc/gitconfig
Linux: /etc/gitconfig

User Level:
Mac OS X, Linux:
~/.gitconfig

--global

Storage Level:
[Alias]
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.cm "commit -m"
git config --global alias.tree 'log --graph --decorate --pretty=oneline --abbrev-commit --color=auto'
git config --global alias.cf 'commit -F'
git config --global alias.slog 'log --pretty=format:"%h - %an, %ar : %s"'
git config --global alias.fs '! git fetch & git status'
git config --global alias.mt mergetool
git config --global alias.am '! git archive master | tar -x -C'
git config --global alias.cot "checkout --track"
git config --global alias.unstage 'reset HEAD --'
git config --global alias.undo 'reset --soft HEAD~1'
git config --global alias.last 'log -1 HEAD'
git config --global alias.difflast 'diff --cached HEAD^'

[Reference]
https://github.com/jesuswasrasta/GitEnvironment




[Linux] Git: push 出错的解决 master -> master (branch is currently checked out)

在使用Git Push代码到数据仓库时，提示如下错误:

[remote rejected] master -> master (branch is currently checked out)
remote: error: refusing to update checked out branch: refs/heads/master
remote: error: By default, updating the current branch in a non-bare repository
remote: error: is denied, because it will make the index and work tree inconsistent
remote: error: with what you pushed, and will require 'git reset --hard' to match
remote: error: the work tree to HEAD.
remote: error:
remote: error: You can set 'receive.denyCurrentBranch' configuration variable to
remote: error: 'ignore' or 'warn' in the remote repository to allow pushing into
remote: error: its current branch; however, this is not recommended unless you
remote: error: arranged to update its work tree to match what you pushed in some
remote: error: other way.
remote: error:
remote: error: To squelch this message and still keep the default behaviour, set
remote: error: 'receive.denyCurrentBranch' configuration variable to 'refuse'.
To git@192.168.1.X:/var/git.server/.../web
 ! [remote rejected] master -> master (branch is currently checked out)
error: failed to push some refs to 'git@192.168.1.X:/var/git.server/.../web'

这是由于git默认拒绝了push操作，需要进行设置，修改.git/config添加如下代码：

    [receive]
    denyCurrentBranch = ignore

 
在初始化远程仓库时最好使用 git --bare init   而不要使用：git init

如果使用了git init初始化，则远程仓库的目录下，也包含work tree，当本地仓库向远程仓库push时,
如果远程仓库正在push的分支上（如果当时不在push的分支，就没有问题）, 那么push后的结果不会反应在work tree上,
也即在远程仓库的目录下对应的文件还是之前的内容，必须得使用git reset --hard才能看到push后的内容.


[Install and Upgrade Git]

Check version
$ git --version
Backup (or remove) Apple git (Optional)
$ sudo mv /usr/bin/git /usr/bin/git-apple

Install Homebrew if you didn’t have
$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

Or update if you already have
$ brew update && brew upgrade

Install Git with Homebrew
$ brew install git

Symbolic link
$ brew link --force git

Close Terminal and reopen then check version
$ git --version
You should see…
git version 2.8.2
Nice! We’re safe now! And next time you can just…

$ brew update && brew upgrade



跟蹤遠端分支
從遠端分支 checkout 出來的本地分支，稱為 跟蹤分支 (tracking branch)。跟蹤分支是一種和某個遠端分支有直接聯繫的本地分支。
在跟蹤分支裡輸入 git push，Git 會自行推斷應該向哪個伺服器的哪個分支推送資料。同樣，在這些分支裡運行 git pull 會獲取所有遠端索引，並把它們的資料都合併到本地分支中來。

在克隆倉庫時，Git 通常會自動創建一個名為 master 的分支來跟蹤 origin/master。
這正是 git push 和 git pull 一開始就能正常工作的原因。當然，你可以隨心所欲地設定為其它跟蹤分支，比如 origin 上除了 master 之外的其它分支。
剛才我們已經看到了這樣的一個例子：git checkout -b [分支名] [遠端名]/[分支名]。如果你有 1.6.2 以上版本的 Git，還可以用 --track 選項簡化：

$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
要為本地分支設定不同于遠端分支的名字，只需在第一個版本的命令裡換個名字：

$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
現在你的本地分支 sf 會自動將推送和抓取資料的位置定位到 origin/serverfix 了。

刪除遠端分支
如果不再需要某個遠端分支了，比如搞定了某個特性並把它合併進了遠端的 master 分支（或任何其他存放穩定代碼的分支）
，可以用這個非常無厘頭的語法來刪除它：git push [遠程名] :[分支名]。如果想在伺服器上刪除 serverfix 分支，運行下面的命令：

$ git push origin :serverfix
To git@github.com:schacon/simplegit.git
 - [deleted]         serverfix
咚！伺服器上的分支沒了。你最好特別留心這一頁，因為你一定會用到那個命令，而且你很可能會忘掉它的語法。
有種方便記憶這條命令的方法：記住我們不久前見過的 git push [遠端名] [本地分支]:[遠端分支] 語法，如果省略 [本地分支]，
那就等於是在說“在這裡提取空白然後把它變成[遠端分支]”。